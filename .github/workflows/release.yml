name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install System Libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0 libxcb-xkb1 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-image0 libxcb-icccm4 libxcb-keysyms1 libxkbcommon-x11-0 libtiff6

      - name: Install 7-Zip (Windows)
        if: runner.os == 'Windows'
        run: choco install 7zip

      - name: Install FPM (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev build-essential
          sudo gem install fpm

      - name: Run PyInstaller
        run: pyinstaller adb.spec --noconfirm

      - name: Compress with 7-Zip (Windows)
        if: runner.os == 'Windows'
        run: 7z a -m0=lzma2 -mx=9 adb-front-windows.7z dist/adb.exe

      - name: Create Linux packages
        if: runner.os == 'Linux'
        run: |
          mkdir -p dist/linux
          fpm -s dir -t deb -n adb-front -v 1.0 -p dist/linux/adb-front_1.0_amd64.deb -C dist adb
          fpm -s dir -t rpm -n adb-front -v 1.0 -p dist/linux/adb-front-1.0.x86_64.rpm -C dist adb

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: adb-front-${{ runner.os }}
          path: |
            adb-front-windows.7z
            dist/adb.app
            dist/linux/
            dist/adb

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release tag
        id: tag
        run: echo "tag=release-$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Release ${{ steps.tag.outputs.tag }}"
          body: |
            Automated release of adb-front.
            ${{ github.event.head_commit.message }}
          files: |
            artifacts/adb-front-Windows/adb-front-windows.7z
            artifacts/adb-front-macOS/adb.app
            artifacts/adb-front-Linux/*.deb
            artifacts/adb-front-Linux/*.rpm
            artifacts/adb-front-Linux/adb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}